openapi: 3.0.0
info:
  version: "1.0.0"
  title: "Food delivery System"
servers:
  - url: http://localhost:4002
tags:
  - name: Admin Profile
    description: APIs related to admin Profile
  - name: Customer Profile
    description: APIs related to Customer Profile
paths:
  /adminLogin:
    post:
      summary: Login admin
      tags:
        - Admin Profile
      consumes:
        - application/json
      produces:
        - application/json
      requestBody:
        description: Admin credentials
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: Admin's email
                password:
                  type: string
                  description: Admin's password
      responses:
        "200":
          description: Admin login successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  token:
                    type: string
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
  /viewAdminProfile:
    get:
      summary: Get admin profile
      tags:
        - Admin Profile
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successful retrieval
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminProfile"
        "401":
          description: Unauthorized
  /updateAdminProfile:
    patch:
      summary: Update admin profile
      tags:
        - Admin Profile
      security:
        - BearerAuth: []
      requestBody:
        description: Admin profile data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminProfile"
      responses:
        "200":
          description: Successful update
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  updatedAdminProfile:
                    $ref: "#/components/schemas/AdminProfile"
        "401":
          description: Unauthorized
        "404":
          description: Admin not found
        "500":
          description: Internal server error
  /deleteAdminProfile:
    delete:
      summary: Delete admin profile
      tags:
        - Admin Profile
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successful deletion
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  deleteAdminProfile:
                    $ref: "#/components/schemas/AdminProfile"
        "401":
          description: Unauthorized
        "404":
          description: Admin not found
        "500":
          description: Internal server error
  /forgetAdminPassword:
    post:
      summary: Reset admin password
      tags:
        - Admin Profile
      security:
        - BearerAuth: []
      requestBody:
        description: Admin password reset data
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                superAdminEmail:
                  type: string
                newPassword:
                  type: string
      responses:
        "200":
          description: Successful password reset
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  token:
                    type: string
        "401":
          description: Unauthorized
        "404":
          description: Admin not found

  /customerSignup:
    post:
      summary: Signup customer
      tags:
        - Customer Profile
      consumes:
        - application/json
      produces:
        - application/json
      requestBody:
        description: Customer signup data
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                favoriteFood:
                  type: string
      responses:
        "201":
          description: Customer registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  customer:
                    $ref: "#/components/schemas/CustomerProfile"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        "500":
          description: Internal server error
  /customerLogin:
    post:
      summary: Login customer
      tags:
        - Customer Profile
      consumes:
        - application/json
      produces:
        - application/json
      requestBody:
        description: Customer credentials
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: Customer login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  token:
                    type: string
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
  /viewCustomerProfile:
    get:
      summary: Get customer profile
      tags:
        - Customer Profile
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successful retrieval
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerProfile"
        "401":
          description: Unauthorized
  /updateCustomerProfile:
    patch:
      summary: Update customer profile
      tags:
        - Customer Profile
      security:
        - BearerAuth: []
      requestBody:
        description: Customer profile data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerProfile"
      responses:
        "200":
          description: Successful update
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  customer:
                    $ref: "#/components/schemas/CustomerProfile"
        "401":
          description: Unauthorized
        "404":
          description: Customer not found
        "500":
          description: Internal server error
  /deleteCustomerProfile:
    delete:
      summary: Delete customer profile
      tags:
        - Customer Profile
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successful deletion
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  deletedCustomer:
                    $ref: "#/components/schemas/CustomerProfile"
        "401":
          description: Unauthorized
        "404":
          description: Customer not found
        "500":
          description: Internal server error
  /forgetCustomerPassword:
    post:
      summary: Reset customer password
      tags:
        - Customer Profile
      security:
        - BearerAuth: []
      requestBody:
        description: Customer password reset data
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                favoriteFood:
                  type: string
                newPassword:
                  type: string
      responses:
        "200":
          description: Successful password reset
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  token:
                    type: string
        "401":
          description: Unauthorized
        "404":
          description: Customer not found
        "500":
          description: Internal server error
  /customerLogout:
    post:
      summary: Logout customer
      tags:
        - Customer Profile
      security:
        - BearerAuth: []
      requestBody:
        description: Customer logout data
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        "200":
          description: Successful logout
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        "500":
          description: Internal server error

  /addRestaurant:
    post:
      summary: Add restaurant
      tags:
        - Restaurant Admin APIs
      security:
        - BearerAuth: []
      requestBody:
        description: New restaurant data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestaurantData'
      responses:
        '201':
          description: Restaurant added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestaurantResponse'
        '500':
          description: Internal server error
  /updateRestaurant/{id}:
    patch:
      summary: Update restaurant by ID
      tags:
        - Restaurant Admin APIs 
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the restaurant to update
      requestBody:
        description: Restaurant update data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestaurantData'
      responses:
        '200':
          description: Restaurant updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestaurantResponse'
        '500':
          description: Internal server error
  /deleteRestaurant/{id}:
    delete:
      summary: Delete restaurant by ID
      tags:
        - Restaurant Admin APIs
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the restaurant to delete
      responses:
        '200':
          description: Restaurant deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestaurantResponse'
        '500':
          description: Internal server error

  /viewAllRestaurant:
    get:
      summary: Get a paginated list of all restaurants
      tags:
        - Restaurant Customer APIs
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
          description: Page number for pagination (default: 1)
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                success: true
                restaurants:
                  -  Restaurant object example
                  -  Another Restaurant object example
                totalPages: 5
  /viewRestaurantById:
    get:
      summary: Get a restaurant by its ID
      tags:
        - Restaurant Customer APIs
      security:
        - BearerAuth: []
      parameters:
        - name: restaurantId
          in: query
          schema:
            type: string
          description: ID of the restaurant
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                success: true
                restaurant:
                   Restaurant object example
  /viewRestaurantByName:
    get:
      summary: Get restaurants by name
      tags:
        - Restaurant Customer APIs
      security:
        - BearerAuth: []
      parameters:
        - name: restaurantName
          in: query
          schema:
            type: string
          description: Name of the restaurant
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                success: true
                restaurants:
                  -  Restaurant object example
                  -  Another Restaurant object example
  /viewRestaurantByCityName:
    get:
      summary: Get restaurants by city name
      tags:
        - Restaurant Customer APIs
      security:
        - BearerAuth: []
      parameters:
        - name: City
          in: query
          schema:
            type: string
          description: Name of the city
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                success: true
                restaurants:
                  - Restaurant object example
                  - Another Restaurant object example

  /viewRestaurantByCategory/{categoryName}:
    get:
      summary: Get restaurants by category name
      tags:
        - Restaurant Customer APIs
      security:
        - BearerAuth: []
      parameters:
        - name: categoryName
          in: path
          description: Category name
          required: true
          type: string
      responses:
        '200':
          description: Successful response
        '500':
          description: Error response
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string                    

  /addCategory:
    post:
      summary: Add a new category
      tags:
        - Category Admin APIs
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '201':
          description: Successful response
          content:
            application/json:
              example:
                success: true
                message: Category added successfully
  /updateCategory/{id}:
    patch:
      summary: Update a category by ID
      tags:
        - Category Admin APIs
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the category to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                success: true
                message: Category updated successfully
                category:
                  # Updated category object example
  /deleteCategory/{id}:
    delete:
      summary: Delete a category by ID
      tags:
        - Category Admin APIs
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the category to delete
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                success: true
                message: Category deleted successfully    

  /viewAllCategories:
    get:
      summary: Get all categories
      tags:
        - Category Customer APIs
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:    
  /viewCategoryById/{id}:
    get:
      summary: Get a category by ID
      tags:
        - Category Customer APIs
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the category to retrieve
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                success: true
  /viewCategoryByName:
    get:
      summary: Get categories by name
      tags:
        - Category Customer APIs
      security:
        - BearerAuth: []
      parameters:
        - name: categoryName
          in: query
          required: true
          schema:
            type: string
          description: Name of the category to search for
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                success: true

  /createMenuItem:
    post:
      summary: Create a new menu item
      tags:
        - Menu Admin APIs
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Menu'
      responses:
        '201':
          description: Successful response
          content:
            application/json:
              example:
                success: true
                message: Menu item created successfully
  /updateMenuItem/{id}:
    patch:
      summary: Update a menu item by ID
      tags:
        - Menu Admin APIs
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the menu item to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Menu'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                success: true
                message: Menu item updated successfully
  /deleteMenuItem/{id}:
    delete:
      summary: Delete a menu item by ID
      tags:
        - Menu Admin APIs
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the menu item to delete
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                success: true
                message: Menu item deleted successfully
  
  /getAllMenuItems:
    get:
      summary: Get all menu items
      tags:
        - Menu Customer APIs
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                - # Menu item object example
                - # Another Menu item object example
  /getMenuItemById/{id}:
    get:
      summary: Get a menu item by ID
      tags:
        - Menu Customer APIs
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the menu item to retrieve
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                success: true
                menuItem:
                  # Menu item object example
  /getMenuItemsByRestaurantName/{restaurantName}:
    get:
      summary: Get menu items by restaurant name
      tags:
        - Menu Customer APIs
      security:
        - BearerAuth: []
      parameters:
        - name: restaurantName
          in: path
          required: true
          schema:
            type: string
          description: Name of the restaurant to search for menu items
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                success: true
                menuItems:
                  - # Menu item object example
                  - # Another Menu item object example
  /getMenuItemsByCategory/{categoryId}:
    get:
      summary: Get menu items by category ID
      tags:
        - Menu Customer APIs
      security:
        - BearerAuth: []
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: string
          description: ID of the category to retrieve menu items
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                success: true
                menuItems:
                  - # Menu item object example
                  - # Another Menu item object example

  /addItems:
    post:
      summary: Add a new item
      tags:
        - Item Admin APIs
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        '201':
          description: Successful response
          content:
            application/json:
              example:
                message: Item added successfully
                item:
                  # Item object example
  /updateItemById/{id}:
    put:
      summary: Update an item by ID
      tags:
        - Item Admin APIs
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the item to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                message: Item updated successfully
                item:
                  # Updated item object example
  /deleteItemById/{id}:
    delete:
      summary: Delete an item by ID
      tags:
        - Item Admin APIs
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the item to delete
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                message: Item deleted successfully

  /getAllItems:
    get:
      summary: Get all items
      tags:
        - Item Customer APIs
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
  /getItemBy/{id}:
    get:
      summary: Get an item by ID
      tags:
        - Item Customer APIs
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the item to retrieve
      responses:
        '200':
          description: Successful response
          content:
            application/json:

  /addItemToCart:
    post:
      summary: Add an item to the cart
      tags:
        - Cart APIs 
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                itemId:
                  type: string
                  description: ID of the item to add to the cart
                quantity:
                  type: integer
                  description: Quantity of the item to add
              required:
                - itemId
                - quantity
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                message: Item added to the cart
  /get-cart:
    get:
      summary: Get the customer's cart
      tags:
        - Cart APIs
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                cart: # Cart object
  /update-cart-item/{itemId}:
    put:
      summary: Update the quantity of an item in the cart
      tags:
        - Cart APIs
      security:
        - BearerAuth: []
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: string
          description: ID of the item to update in the cart
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
                  description: New quantity of the item
              required:
                - quantity
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                message: Item quantity updated in the cart
  /remove-cart-item/{itemId}:
    delete:
      summary: Remove an item from the cart
      tags:
        - Cart APIs
      security:
        - BearerAuth: []
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: string
          description: ID of the item to remove from the cart
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                message: Item removed from the cart

  /place-order:
    post:
      summary: Place a new order
      tags:
        - Order APIs
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cartId:
                  type: string
                  description: ID of the cart
                paymentMethod:
                  type: string
                  description: Payment method used for the order
                shippingAddress:
                  $ref: '#/components/schemas/ShippingAddress'
              required:
                - cartId
                - paymentMethod
                - shippingAddress
      responses:
        '201':
          description: Successful response
          content:
            application/json:
              example:
                success: true
                message: Order placed successfully                
  /customers/{customerId}/orders:
    get:
      summary: Get all orders for a customer
      tags:
        - Order APIs
      security:
        - BearerAuth: []
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
          description: ID of the customer whose orders to retrieve
      responses:
        '200':
          description: Successful response
          content:
            application/json:
  /orders/{orderId}:
    get:
      summary: Get an order by ID
      tags:
        - Order APIs
      security:
        - BearerAuth: []
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
          description: ID of the order to retrieve
      responses:
        '200':
          description: Successful response
          content:
            application/json:
        '404':
          description: Order not found
  /cancelOrders/{orderId}:
    delete:
      summary: Cancel an order by ID
      tags:
        - Order APIs
      security:
        - BearerAuth: []
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
          description: ID of the order to cancel
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                message: Order cancelled successfully
        '404':
          description: Order not found

  /addDeliveryStaff:
    post:
      summary: Add a new delivery staff
      tags:
        - Delivery Staff APIs
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeliveryStaff'
      responses:
        '201':
          description: Successful response
          content:
            application/json:
              example:
                success: true
                message: Delivery staff added successfully
  /viewAllDeliveryStaff:
    get:
      summary: Get all delivery staff
      tags:
        - Delivery Staff APIs
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                success: true
  /viewDeliveryStaffById/{id}:
    get:
      summary: Get delivery staff by ID
      tags:
        - Delivery Staff APIs
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the delivery staff to retrieve
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                success: true
        '404':
          description: Delivery staff not found
  /updateDeliveryStaff/{id}:
    patch:
      summary: Update delivery staff by ID
      tags:
        - Delivery Staff APIs
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the delivery staff to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeliveryStaff'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                success: true
                message: Delivery staff updated successfully
        '404':
          description: Delivery staff not found
  /deleteDeliveryStaff/{id}:
    delete:
      summary: Delete delivery staff by ID
      tags:
        - Delivery Staff APIs
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the delivery staff to delete
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                success: true
                message: Delivery staff deleted successfully
        '404':
          description: Delivery staff not found

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    AdminProfile:
      type: object
      properties:
        _id:
          type: string
        email:
          type: string
        password:
          type: string
        superAdminEmail:
          type: string
    CustomerProfile:
      type: object
      properties:
        _id:
          type: string
        username:
          type: string
        password:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        favoriteFood:
          type: string
    RestaurantData:
      type: object
      properties:
        restaurantId:
          type: number
        restaurantName:
          type: string
        countryCode:
          type: number
        City:
          type: string
        Address:
          type: string
        Locality:
          type: string
        Longitude:
          type: number
        Latitude:
          type: number
        Cuisines:
          type: string
        averageCostForTwo:
          type: number
        Currency:
          type: string
        hasTableBooking:
          type: string
        hasOnlineDelivery:
          type: string
        priceRange:
          type: number
        aggregateRating:
          type: number
        ratingColor:
          type: string
        ratingText:
          type: string
        Votes:
          type: number
    Category:
      type: object
      properties:
        _id:
          type: string
          description: The unique identifier for the category.
        categoryName:
          type: string
          description: The name of the category.
        categoryImage:
          type: string 
          description: The image URL of the category.
        categoryDescription:
          type: string
          description: The description of the category.
        created_at:
          type: string
          format: date-time
          description: The creation timestamp of the category.    
    Menu:
      type: object
      properties:
        _id:
          type: string
          description: The unique identifier for the menu item.
        categoryId:
          type: string
          description: The ID of the category associated with the menu item.
        menuName:
          type: string
          description: The name of the menu item.              
    Item:
      type: object
      properties:
        _id:
          type: string
          description: The unique identifier for the item.
        menuId:
          type: string
          description: The ID of the menu associated with the item.
        name:
          type: string
          description: The name of the item.
        price:
          type: number
          format: float
          description: The price of the item.    
    CartItem:
      type: object
      properties:
        itemId:
          type: string
          description: The ID of the item.
        quantity:
          type: integer
          description: The quantity of the item.
        unit_price:
          type: number
          format: float
          description: The unit price of the item.
    Cart:
      type: object
      properties:
        _id:
          type: string
          description: The unique identifier for the cart.
        customerId:
          type: string
          description: The ID of the customer associated with the cart.
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
          description: List of items in the cart.
        cartTotal:
          type: number
          format: float
          description: The total cost of the cart.
    ShippingAddress:
      type: object
      properties:
        houseNo:
          type: string
        city:
          type: string
        district:
          type: string
        country:
          type: string
        pinCode:
          type: integer
    Order:
      type: object
      properties:
        _id:
          type: string
          description: The unique identifier for the order.
        cartId:
          type: string
          description: The ID of the cart associated with the order.
        customerId:
          type: string
          description: The ID of the customer who placed the order.
        resturantId:
          type: string
          description: The ID of the restaurant associated with the order.
        staffId:
          type: string
          description: The ID of the delivery staff for the order.
        status:
          type: string
          enum:
            - pending
            - confirmed
            - shipped
            - delivered
            - cancelled
          description: The status of the order.
        orderTotal:
          type: number
          format: float
          description: The total cost of the order.
        shippingAddress:
          $ref: '#/components/schemas/ShippingAddress'
        placeOrderDate:
          type: string
          format: date-time
          description: The date and time the order was placed.
        deliveryDate:
          type: string
          format: date-time
          description: The date and time the order will be delivered.
    DeliveryStaff:
      type: object
      properties:
        _id:
          type: string
          description: The unique identifier for the delivery staff.
        resturantId:
          type: string
          description: The ID of the restaurant the delivery staff is associated with.
        firstName:
          type: string
        lastName:
          type: string
        contactNumber:
          type: string
        email:
          type: string
        DOB:
          type: string
          format: date
        gender:
          type: string
          enum:
            - Male
            - Female
            - Other
        isAvailable:
          type: boolean
      required:
        - resturantId
        - firstName
        - lastName
        - contactNumber
        - email
        - gender

